==============================
How to Use 2-matrix_divided.py
==============================

This module defines a matrix division function ``matrix_divided(matrix, div)``.

Usage
=====

``matrix_divided(...)`` returns a new matrix that is a copy of the parameter
``matrix`` with all elements divided by ``div``.

::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [[3, 6, 3], [6, 9, 6]]
	>>> matrix_divided(matrix, 3)
	[[1.0, 2.0, 1.0], [2.0, 3.0, 2.0]]


Testing if you integers a integers
::

	>>> matrix = [[3.9, 6.3, 3.3], [6.6, 9.12, 3.9]]
	>>> matrix_divided(matrix, 3)
	[[1.3, 2.1, 1.1], [2.2, 3.04, 1.3]]

Testing for floats
::

	>>> matrix = [[3.9, 6.3, 3], [6.6, 9, 3.9]]
	>>> matrix_divided(matrix, 3)
	[[1.3, 2.1, 1.0], [2.2, 3.0, 1.3]]

Testing floats ans integers
::

	>>> matrix = [[3.9, 6.3, -3], [6.6, -9, -3.9]]
	>>> matrix_divided(matrix, 3)
	[[1.3, 2.1, -1.0], [2.2, -3.0, -1.3]]

Testing negative numbers mixed with positive
::

	>>> matrix = [[]]
	>>> matrix_divided(matrix, 3)
	[[]]

Testing an empty matrix
::
	>>> matrix = [[3, 6, 3], [6, 9]]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

Testing uneven sizes of rows
::

	>>> matrix = [[3.9, 6.3, 3], [6.6, 9, 3.9]]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

Division by Zero
::
	>>> matrix = [[1.5, 2, 4], [6.6, 9, 2]]
	>>> matrix_divided(matrix, 0.5)
	[[3.0, 4.0, 8.0], [13.2, 18.0, 4.0]]

Division with a float
::

	>>> matrix = [[1.5, 2, 4], [6.6, 9, 2]]
	>>> matrix_divided(matrix, 'boy')
	Traceback (most recent call last):
	TypeError: div must be a number

Division by a string
::

	>>> matrix = [[1.5, 2, 4], [6.6, 'boy', 2]]
	>>> matrix_divided(matrix, 0.5)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

testing when matrix has a string
::

	>>> matrix = [[1.5, 2, 4], (6.6, 6, 2)]
	>>> matrix_divided(matrix, 0.5)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

testing for tuple in lmatrix
::
 	>>> matrix = [1.5, 2, 4, 6.6, 6, 2]
        >>> matrix_divided(matrix, 1)
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing if i pass a list instead of a tuple
::

        >>> matrix = ([1.5, 2, 4], [6.6, 6, 2])
        >>> matrix_divided(matrix, 0.5)
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing is a matrix is in a tuple of lists
::
 
	>>> matrix = [[None], [None]]
        >>> matrix_divided(matrix, 0.5)
        Traceback (most recent call last):
        TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing if you pass None in the list
::

        >>> matrix = [[1.5, 2, 4], [6.6, 9, 2]]
        >>> matrix_divided(matrix, None)
        Traceback (most recent call last):
        TypeError: div must be a number

Passing None as the divider
::
